{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","components/hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","useStyles","makeStyles","theme","image","borderRadius","maxHeight","width","containerImage","border","GifGridItem","title","url","classes","Grid","item","xs","sm","md","lg","container","direction","alignItems","className","src","alt","Typography","variant","color","getGifs","category","a","URL","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","spacing","wrap","GifExpertApp","props","ReactDOM","render","document","getElementById"],"mappings":"6MAiDeA,EA9CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAKnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OAEI,uBAAMC,SAhBS,SAACC,GAChBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAK3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAc,MAMlB,UACI,uBACIO,KAAK,OACLC,YAAY,qBACZC,MAAQV,EACRW,SAzBc,SAAER,GACxBF,EAAcE,EAAES,OAAOF,UA0BnB,mCAAMV,EAAN,W,gCClCNa,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CACHC,aAAc,EACdC,UAAW,QACXC,MAAO,QAEXC,eAAgB,CACZC,OAAQ,iBACRJ,aAAc,OA4BPK,EAvBK,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,IACrBC,EAAUZ,IAChB,OACI,cAACa,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,SACI,eAACL,EAAA,EAAD,CAAMM,WAAS,EAACC,UAAU,SAASC,WAAW,SAASC,UAAWV,EAAQL,eAA1E,UACI,cAACM,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAvC,SACI,qBACIK,IAAMZ,EACNa,IAAMd,EACNY,UAAWV,EAAQT,UAG3B,cAACU,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAvC,SACI,cAACO,EAAA,EAAD,CAAYC,QAAQ,UAAUC,MAAM,UAApC,SACKjB,Y,yBC/BZkB,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACR9B,MAAO6B,EAAI7B,MACXC,IAAG,UAAE4B,EAAIE,cAAN,aAAE,EAAYC,iBAAiB/B,QARvB,kBAWZ0B,GAXY,4CAAH,sDCoDLM,EA7CC,SAAC,GAAkB,IAAhBd,EAAe,EAAfA,SAiBf,ECnBwB,SAAEA,GAC1B,MAA0B3C,mBAAS,CAC/BkD,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAVAC,qBAAU,WACNnB,EAASC,GACJmB,MAAM,SAAAC,GACHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAAEf,IAEEgB,EDC2BK,CAAcrB,GAAlCY,EAAd,EAAQL,KAAcQ,EAAtB,EAAsBA,QAEtB,OACI,gCACI,mCAAMf,EAAN,OAMEe,GAAY,wCACd,cAAC/B,EAAA,EAAD,CAAMM,WAAS,EAACC,UAAU,MAAM+B,QAAS,EAAGC,KAAK,OAAjD,SAEQX,EAAOH,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAKEA,GAJCA,EAAIC,aESvBa,EA5CM,SAAEC,GACnB,MAAoCpE,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAUA,OACI,qCACI,gDAKA,cAAC,EAAD,CAAcA,cAAgBA,IAC9B,uBAEA,6BAEQS,EAAW4C,KAAK,SAAAT,GAQZ,OAAO,cAAC,EAAD,CAECA,SAAWA,GADLA,YC/BtC0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.374d44f6.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    \r\n    // Es buena practica indicar que el hook será de un tipo definido\r\n    // ejemplo: en el hook de abajo, se indicara que la variable inputValue\r\n    // sera de tipo string, definiendola como string vacio\r\n    const [inputValue, setInputValue] = useState('')\r\n    \r\n    // @param: Evento, es quien recibe  \r\n    const handleInputChange = ( e ) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleForm = (e) => {\r\n        e.preventDefault();\r\n        // Si el input es superior a 2, agregará una categoria \r\n        // a la lista en el componente padre\r\n        if( inputValue.trim().length > 2 ) {\r\n            // Se hace de esta forma, dado que en este componente no se puede\r\n            // acceder directamente a la variable categories del componente\r\n            // `GifExpertApp`, sin embargo esto se puede hacer de igual forma\r\n            // enviando categories como otra prop a este componente \r\n            setCategories( categories => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <form onSubmit={ handleForm }>\r\n            <input \r\n                type=\"text\"\r\n                placeholder=\"Escribe aquí...\" \r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n            <h1> {inputValue} </h1> \r\n        </form>\r\n        \r\n        \r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","import React from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { makeStyles, Typography } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    image: {\r\n        borderRadius: 5,\r\n        maxHeight: '170px',\r\n        width: '100%'\r\n    },\r\n    containerImage: {\r\n        border: '1px solid #000',\r\n        borderRadius: 5,\r\n    }\r\n}));\r\n\r\n\r\nconst GifGridItem = ( { title, url } ) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Grid item xs={12} sm={6} md={4} lg={3} >    \r\n            <Grid container direction=\"column\" alignItems=\"center\" className={classes.containerImage}>\r\n                <Grid item xs={12} sm={12} md={12} lg={12} >\r\n                    <img\r\n                        src={ url }\r\n                        alt={ title }\r\n                        className={classes.image}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={12} md={12} lg={12} >\r\n                    <Typography variant=\"caption\" color=\"initial\">\r\n                        {title}\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n        \r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","export const getGifs = async (category) => {\r\n    const URL = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=8z3DXrwHDbet9HxvtY4gKJfws1LQAhjq`;\r\n    const resp = await fetch(URL);\r\n    const { data } = await resp.json();\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n}","import React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport Grid from '@material-ui/core/Grid'\r\n// import { getGifs } from '../helpers/getGifs'\r\nimport { useFetchGifs } from './hooks/useFetchGifs';\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // useEffect permite que se ejecute cierta instrucción cuando el \r\n    // componente, en este caso ´GifGrid´ es renderizado por 1ra vez\r\n    \r\n    // @param: es una callback function, en la cual indicaremos \r\n    // la instrucción a ejecutar\r\n    // @param: Array en el cual podemos indicar las variables\r\n    // de las cuales dependerá cuantas veces se tendrá que ejecutar \r\n    // la instrucción, si se le pasa un array vacio, react solo ejecutará \r\n    // la instrucción una vez despúes de que se haya renderizado todo el componente\r\n    \r\n    // CUSTOM HOOK QUE SE ENCARGARA DE MANEJAR EL ESTADO DE LA \r\n    // DATA QUE REGRESA DESDE LA API, ADEMÁS DE MANEJAR TAMBIEN\r\n    // EL ESTADO DE CARGA DE LA PETICION\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <div>\r\n            <h3> {category} </h3>\r\n            {/* \r\n                Si loading no es 'true', entonces no hace nada .\r\n                Es una buena practica para suplantar al operador\r\n                ternario.\r\n            */}\r\n            { loading  && <p>Loading</p> } \r\n            <Grid container direction=\"row\" spacing={2} wrap=\"wrap\">\r\n                {\r\n                    images.map( img => {\r\n                        return <GifGridItem \r\n                            key={ img.id }\r\n                            // Forma 1\r\n                            // img={img} \r\n                            // Forma 2\r\n                            { ...img }\r\n                        />\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGrid\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../../helpers/getGifs\";\r\n\r\n// Es un estandar que todos los hooks en react\r\n// comienzan con 'use'\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Los efectos no pueden ser 'async' porque esperan\r\n    // algo síncrono\r\n    useEffect(() => {        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });                    \r\n            })\r\n    }, [ category ])\r\n\r\n    return state; // { data: [], loading: true}\r\n}\r\n","import React, { useState } from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = ( props ) => {\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n    // const handleCategories = () => {\r\n    //     let newCategory = 'Jujutsu Kaisen';\r\n    //     // Forma 1: Se usa cuando no se tiene acceso directo \r\n    //     // a la variable del hook\r\n    //     setCategories( categories => [newCategory, ...categories]);\r\n    //     // Forma 2: Se usa cuando se tiene acceso a la variable ´newCategory´\r\n    //     setCategories([newCategory, ...categories]);\r\n    // }\r\n \r\n    return (\r\n        <>\r\n            <h2> GifExpertApp </h2>\r\n            {/* \r\n                Se está enviando una funcion como prop al componente \r\n                `AddCategory` \r\n            */}\r\n            <AddCategory  setCategories={ setCategories }/>\r\n            <hr/>\r\n            {/* <button onClick={handleCategories}> Agregar Categoria </button> */}\r\n            <ol>\r\n                { \r\n                    categories.map( category => {\r\n                        // Generalmente, cuando se trabajan con datos desde\r\n                        // bases de datos, la key del elemento o dato a \r\n                        // renderizar corresponde al id del dato, sin embargo\r\n                        // en esta ocasión colocaremos la misma categoria como \r\n                        // key por que el índice no puede ser\r\n                        // React hace esto para saber qué elemento tiene que \r\n                        // renderizar, y así no tener que renderizar todo de nuevo\r\n                        return <GifGrid \r\n                                key={ category }\r\n                                category={ category }\r\n                                />\r\n                    }) \r\n                }\r\n            </ol>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp'\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}